# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2017-03-29 18:34
from __future__ import unicode_literals

from django.db import migrations
from django.utils import timezone
from django.conf import settings

import uuid

def create_assign_allocationsources(apps,schema_editor):
    if 'jetstream' in settings.INSTALLED_APPS:
        return
    AllocationSourceModel = apps.get_model('core','AllocationSource')
    UserModel = apps.get_model('core','AtmosphereUser')
    UserAllocationModel = apps.get_model('core', 'UserAllocationSource')
    EventTableModel = apps.get_model('core','EventTable')
    AllocationSourceSnapshotModel = apps.get_model('core','AllocationSourceSnapshot')

    for user in UserModel.objects.all():
        #Create Allocation Source if User does not have any
        if not UserAllocationModel.objects.filter(user=user).last():
            source_name, source_uuid = create_allocationsources_for(user, EventTableModel,AllocationSourceModel, AllocationSourceSnapshotModel)
        else:
            return

        # IF ALLOCATION SOURCE CREATED, CREATE USER ALLOCATION SOURCE ELSE RAISE EXCEPTION
        allocation_source_object = AllocationSourceModel.objects.filter(uuid=source_uuid).last()
        if allocation_source_object:
            create_user_allocationsource_for(user, allocation_source_object, EventTableModel, UserAllocationModel )

        else:
            raise Exception('Allocation Source %s-%s failed to create' % (source_name, source_uuid))

        if not UserAllocationModel.objects.filter(
                allocation_source__uuid=source_uuid,
                user=user).last():
            raise Exception(
                'User Allocation Source %s-%s failed to create' % (user.username, source_uuid))


def create_allocationsources_for(user,EventTable, AllocationSource,AllocationSourceSnapshot, *args,**kwargs):
    #VALUESFOR ONE TIME MIGRATION
    COMPUTE_ALLOWED_VALUE = 168
    RENEWAL_STRATEGY = 'default'
    ALLOCATION_SOURCE_NAME = user.username

    payload = {}
    payload['source_id'] = str(uuid.uuid4())
    payload['name'] = ALLOCATION_SOURCE_NAME # USERNAME IS THE ALLOCATION SOURCE NAME
    payload['compute_allowed'] = COMPUTE_ALLOWED_VALUE
    payload['renewal_strategy'] = RENEWAL_STRATEGY

    creation_event = EventTable(
        name='allocation_source_created',
        entity_id=payload['source_id'],
        payload=payload)

    creation_event.save()

    # EVENT WONT FIRE SIGNALS IN MIGRATIONS!

    allocation_source = AllocationSource(
        uuid=uuid.UUID(payload['source_id']),
        name=payload['name'],
        compute_allowed=payload['compute_allowed'],
        renewal_strategy=payload['renewal_strategy'],
        start_date=timezone.now()
    )

    allocation_source.save()

    # create snapshot

    allocation_source_snapshot = AllocationSourceSnapshot(allocation_source=allocation_source,
                                                          global_burn_rate=0,
                                                          compute_used=0.0,
                                                          compute_allowed=payload['compute_allowed']
                                                          )
    allocation_source_snapshot.save()

    return payload['name'], payload['source_id']



def create_user_allocationsource_for(user, allocation_source,EventTable, UserAllocationSource,*args,**kwargs):

    payload = {}
    payload['username'] = user.username
    payload['source_id'] = str(allocation_source.uuid)

    creation_event = EventTable.objects.create(
        name='user_allocation_source_assigned',
        entity_id=payload['source_id'],
        payload=payload)

    creation_event.save()

    #create UserAllocationSource Snapshot

    allocation_source = UserAllocationSource(allocation_source=allocation_source,
                                             user=user)
    allocation_source.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0080_allocation_source_v2__add_fields'),
    ]

    operations = [
        migrations.RunPython(
            create_assign_allocationsources,
            reverse_code=migrations.RunPython.noop),
    ]

