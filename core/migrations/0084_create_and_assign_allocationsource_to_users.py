# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-21 19:51
from __future__ import unicode_literals

import uuid

from django.db import migrations
from django.db.models.signals import post_save
from django.conf import settings

from core.hooks.allocation_source import (
    listen_for_instance_allocation_changes,
    listen_for_allocation_source_created_or_renewed,
    listen_for_user_allocation_source_created
)


def connect_hooks(event_model):
    post_save.connect(listen_for_instance_allocation_changes, sender=event_model)
    post_save.connect(listen_for_user_allocation_source_created, sender=event_model)
    post_save.connect(listen_for_allocation_source_created_or_renewed, sender=event_model)


def _create_allocation_source(allocation_source_name, EventTable, AllocationSourceTable):
    payload = {}
    payload['uuid'] = str(uuid.uuid4())
    payload['allocation_source_name'] = allocation_source_name
    payload['compute_allowed'] = 168
    payload['renewal_strategy'] = "default"

    event = EventTable(
        name='allocation_source_created_or_renewed',
        entity_id=allocation_source_name,
        payload=payload
    )

    event.save()

    assert AllocationSourceTable.objects.get(name=allocation_source_name)


def _assign_user_allocation_source(allocation_source_name, username, EventTable, UserAllocationSourceTable):
    payload = {}
    payload['allocation_source_name'] = allocation_source_name

    event = EventTable(
        name='user_allocation_source_created',
        entity_id=username,
        payload=payload
    )

    event.save()

    assert UserAllocationSourceTable.objects.get(allocation_source__name=allocation_source_name,
                                                 user__username=username)


def _assign_instance_allocation_source(allocation_source_name, username, instance_id, EventTable,
                                       InstanceAllocationSourceTable):
    payload = {}
    payload['instance_id'] = instance_id
    payload['allocation_source_name'] = allocation_source_name

    event = EventTable(
        name='instance_allocation_source_changed',
        entity_id=username,
        payload=payload)

    event.save()

    assert InstanceAllocationSourceTable.objects.get(
        allocation_source__name=allocation_source_name,
        instance__provider_alias=instance_id)


def create_and_assign_allocationsource(apps, schema_editor):
    JETSTREAM_INSTALLED = apps.is_installed('jetstream')
    if JETSTREAM_INSTALLED:
        print "Jetstream installed -- Skipping migration 0084...",
        return
    AllocationSourceTable = apps.get_model('core', 'AllocationSource')
    UserAllocationSourceTable = apps.get_model('core', 'UserAllocationSource')
    InstanceAllocationSourceTable = apps.get_model('core', 'InstanceAllocationSourceSnapshot')
    EventTable = apps.get_model('core', 'EventTable')
    UserTable = apps.get_model('core', 'AtmosphereUser')

    connect_hooks(EventTable)

    for user in UserTable.objects.all():
        username = user.username
        allocation_source_name = "%s" % username

        # create allocation source
        _create_allocation_source(allocation_source_name, EventTable, AllocationSourceTable)

        # assign user allocation source
        _assign_user_allocation_source(allocation_source_name, username, EventTable, UserAllocationSourceTable)

        # assign user's instance to allocation source
        for instance in user.instance_set.all():
            if not instance.end_date:
                instance_id = str(instance.provider_alias)

                _assign_instance_allocation_source(allocation_source_name, username, instance_id, EventTable,
                                                   InstanceAllocationSourceTable)


class Migration(migrations.Migration):
    dependencies = [
        ('core', '0083_delete_renewalstrategy_make_unique_userallocationsource'),
    ]

    operations = [
        migrations.RunPython(
            create_and_assign_allocationsource,
            reverse_code=migrations.RunPython.noop),
    ]
